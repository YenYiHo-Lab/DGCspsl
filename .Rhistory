# setting liquid association
rho<-inv.fisher(t(t(outer(z,tau1))+tau0))
# Generating z
z<-runif(n,0,1)
# Generating x
time1<-Sys.time()
x<-matrix(rep(0,nb*n),nrow=n)
for (i in 1:n){
cor.mat <- diag(rep(0.5,nb))
cor.mat[lower.tri(cor.mat)] <- rho[i,]
cor.mat<-cor.mat+t(cor.mat)
while(is.positive.definite(cor.mat)==F){
z[i]<-runif(1)
rho[i,]<-inv.fisher(t(t(outer(z[i],tau1))+tau0))
cor.mat <- diag(rep(0.5,nb))
cor.mat[lower.tri(cor.mat)] <- rho[i,]
cor.mat<-cor.mat+t(cor.mat)
}
x[i,]<-rnorm(nb)%*%chol(cor.mat) # Cholesky decomposition
}
time2<-Sys.time()
cat("generating x needs", as.numeric(time2-time1),"seconds\n")
dim(x)
y
getY<-function(x,nb,method="original"){
if (method=="combination"){
# 1. combination of orginal data, form a 20 column matrix
y=c()
col=nb
for (j in 1:(col-1)){
for (k in (j+1):col){
cat(j,k,"\n")
y=cbind(y, x[,c(j,k)])
}
}
return(y)
} else if (method=="multiplication"){
# 2. xi*xj stands for the log[(1+rho)/(1-rho)]
y=c()
col=nb
for (j in 1:(col-1)){
for (k in (j+1):col){
#cat(j,k,"\n")
y=cbind(y, x[,j]*x[,k])
}
}
return(y)
}else if (method=="original"){
# 3. Just use x as response variable
y=x
return(y)
}
}
y<-getY(scale(x),nb=nb,method="multiplication")
dim(y)
spsl <- function(data,
z,
n.iter = 500,
n.adapt = 0,
n.chains = 1) {
fisher <- function(x)
return(1 / 2 * log((1 + x) / (1 - x)))
inv.fisher <- function(x)
return((exp(2 * x) - 1) / (exp(2 * x) + 1))
nb = ncol(data) # number of gene
n = nrow(data)
q = choose(nb, 2) # size of combination
#######################################
# Generating y, the response variable #
#######################################
getY <- function(x, nb) {
# 2. xi*xj stands for the log[(1+rho)/(1-rho)]
y = c()
col = nb
for (j in 1:(col - 1)) {
for (k in (j + 1):col) {
y = cbind(y, x[, j] * x[, k])
}
}
return(y)
}
# load data
y <- getY(scale(x), nb = nb)
# independent spike and slab
model1_stringM1 <- "
model{
for(i in 1:n){
for(j in 1:q){
y[i,j] ~ dnorm(1-2/(exp(2*mu[i,j])+1), prec[j])
mu[i,j]<-alpha[j]+z[i]*beta[j]
}
}
for (j in 1:q) {
beta[j]~dnorm(0,s[j])
s[j]<-1/(vars[j])
vars[j]<-tau[j]*r[j]
tau[j]<-1/invtau[j]
invtau[j]~dgamma(5,50)
r[j]<-w[j]+0.005*w[j]
w[j]~dunif(0,1)
prec[j]~dgamma(0.01,0.01)
alpha[j]~dnorm(0,n-3)
}
}
"
jags_data = list(n = n,
y = y,
z = z,
q = q)
n.iter = n.iter
time1 <- Sys.time()
# add try to jags.model to find out problems when jags is canceled
jags_model = try(jags.model(
textConnection(model1_stringM1),
data = jags_data,
n.adapt = n.adapt,
n.chains = n.chains
))
class(jags_model)
update(jags_model, n.iter = n.iter)
coda_sample = coda.samples(
jags_model,
c("alpha", "beta", "prec", "w", "vars", "r"),
n.iter = n.iter,
n.burnin = floor(n.iter / 2)
)
time2 <- Sys.time()
time <- time2 - time1
return(list(coda_sample, time))
}
spsl(y,z,n.iter=50)
spsl(x,z,n.iter=50)
library(mvtnorm)
library(matrixcalc)
library(Matrix)
library(rjags)
spsl(x,z,n.iter=50)
result <- spsl(x,z,n.iter=50)
str(result)
result[[1]]
summary(result[[1]])
# Hello, world!
#
# This is an example function named 'hello'
# which prints 'Hello, world!'.
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
############################
# Generate data of x and z #
############################
library(mvtnorm)
library(matrixcalc)
library(Matrix)
library(rjags)
spsl <- function(data,
z,
n.iter = 500,
n.adapt = 0,
n.chains = 1) {
fisher <- function(x)
return(1 / 2 * log((1 + x) / (1 - x)))
inv.fisher <- function(x)
return((exp(2 * x) - 1) / (exp(2 * x) + 1))
nb = ncol(data) # number of gene
n = nrow(data)
q = choose(nb, 2) # size of combination
#######################################
# Generating y, the response variable #
#######################################
getY <- function(x, nb) {
# 2. xi*xj stands for the log[(1+rho)/(1-rho)]
y = c()
col = nb
for (j in 1:(col - 1)) {
for (k in (j + 1):col) {
y = cbind(y, x[, j] * x[, k])
}
}
return(y)
}
# load data
y <- getY(scale(x), nb = nb)
# independent spike and slab
model1_stringM1 <- "
model{
for(i in 1:n){
for(j in 1:q){
y[i,j] ~ dnorm(1-2/(exp(2*mu[i,j])+1), prec[j])
mu[i,j]<-tau0[j]+z[i]*tau1[j]
}
}
for (j in 1:q) {
tau1[j]~dnorm(0,s[j])
s[j]<-1/(vars[j])
vars[j]<-tau[j]*r[j]
tau[j]<-1/invtau[j]
invtau[j]~dgamma(5,50)
r[j]<-w[j]+0.005*w[j]
w[j]~dunif(0,1)
prec[j]~dgamma(0.01,0.01)
tau0[j]~dnorm(0,n-3)
}
}
"
jags_data = list(n = n,
y = y,
z = z,
q = q)
n.iter = n.iter
time1 <- Sys.time()
# add try to jags.model to find out problems when jags is canceled
jags_model = try(jags.model(
textConnection(model1_stringM1),
data = jags_data,
n.adapt = n.adapt,
n.chains = n.chains
))
class(jags_model)
update(jags_model, n.iter = n.iter)
coda_sample = coda.samples(
jags_model,
c("tau0", "tau1", "prec", "w", "vars", "r"),
n.iter = n.iter,
n.burnin = floor(n.iter / 2)
)
time2 <- Sys.time()
time <- time2 - time1
return(list(coda_sample, time))
}
result <- spsl(x, z, n.iter=100, n.adapt=0, n.chains=1)
summary(result[[1]])
print(reuslt[[2]])
print(result[[2]])
spsl <- function(data,
z,
n.iter = 500,
n.adapt = 0,
n.chains = 1) {
fisher <- function(x)
return(1 / 2 * log((1 + x) / (1 - x)))
inv.fisher <- function(x)
return((exp(2 * x) - 1) / (exp(2 * x) + 1))
nb = ncol(data) # number of gene
n = nrow(data)
q = choose(nb, 2) # size of combination
#######################################
# Generating y, the response variable #
#######################################
getY <- function(x, nb) {
# 2. xi*xj stands for the log[(1+rho)/(1-rho)]
y = c()
col = nb
for (j in 1:(col - 1)) {
for (k in (j + 1):col) {
y = cbind(y, x[, j] * x[, k])
}
}
return(y)
}
# load data
y <- getY(scale(x), nb = nb)
# independent spike and slab
model1_stringM1 <- "
model{
for(i in 1:n){
for(j in 1:q){
y[i,j] ~ dnorm(1-2/(exp(2*mu[i,j])+1), prec[j])
mu[i,j]<-tau0[j]+z[i]*tau1[j]
}
}
for (j in 1:q) {
tau1[j]~dnorm(0,s[j])
s[j]<-1/(vars[j])
vars[j]<-tau[j]*r[j]
tau[j]<-1/invtau[j]
invtau[j]~dgamma(5,50)
r[j]<-w[j]+0.005*w[j]
w[j]~dunif(0,1)
prec[j]~dgamma(0.01,0.01)
tau0[j]~dnorm(0,n-3)
}
}
"
jags_data = list(n = n,
y = y,
z = z,
q = q)
n.iter = n.iter
time1 <- Sys.time()
# add try to jags.model to find out problems when jags is canceled
jags_model = try(jags.model(
textConnection(model1_stringM1),
data = jags_data,
n.adapt = n.adapt,
n.chains = n.chains
))
class(jags_model)
update(jags_model, n.iter = n.iter)
coda_sample = coda.samples(
jags_model,
c("tau0", "tau1", "prec", "w", "vars", "r"),
n.iter = n.iter,
n.burnin = floor(n.iter / 2)
)
time2 <- Sys.time()
time <- time2 - time1
return(list(coda_sample, as.numeric(time, units="secs")))
}
result <- spsl(x, z, n.iter=100, n.adapt=0, n.chains=1)
summary(result[[1]])
print(result[[2]])
print("",result[[2]])
print(""+result[[2]])
cat("The computation time for MCMC is"+result[[2]] + "secs", "\n")
cat("The computation time for MCMC is", result[[2]], "secs", "\n")
library(rjags)
spsl <- function(data,
z,
n.iter = 500,
n.adapt = 0,
n.chains = 1) {
fisher <- function(x)
return(1 / 2 * log((1 + x) / (1 - x)))
inv.fisher <- function(x)
return((exp(2 * x) - 1) / (exp(2 * x) + 1))
nb = ncol(data) # number of gene
n = nrow(data)
q = choose(nb, 2) # size of combination
#######################################
# Generating y, the response variable #
#######################################
getY <- function(x, nb) {
# 2. xi*xj stands for the log[(1+rho)/(1-rho)]
y = c()
col = nb
for (j in 1:(col - 1)) {
for (k in (j + 1):col) {
y = cbind(y, x[, j] * x[, k])
}
}
return(y)
}
# load data
y <- getY(scale(x), nb = nb)
# independent spike and slab
model1_stringM1 <- "
model{
for(i in 1:n){
for(j in 1:q){
y[i,j] ~ dnorm(1-2/(exp(2*mu[i,j])+1), prec[j])
mu[i,j]<-tau0[j]+z[i]*tau1[j]
}
}
for (j in 1:q) {
tau1[j]~dnorm(0,s[j])
s[j]<-1/(vars[j])
vars[j]<-tau[j]*r[j]
tau[j]<-1/invtau[j]
invtau[j]~dgamma(5,50)
r[j]<-w[j]+0.005*w[j]
w[j]~dunif(0,1)
prec[j]~dgamma(0.01,0.01)
tau0[j]~dnorm(0,n-3)
}
}
"
jags_data = list(n = n,
y = y,
z = z,
q = q)
n.iter = n.iter
time1 <- Sys.time()
# add try to jags.model to find out problems when jags is canceled
jags_model = try(jags.model(
textConnection(model1_stringM1),
data = jags_data,
n.adapt = n.adapt,
n.chains = n.chains
))
class(jags_model)
update(jags_model, n.iter = n.iter)
coda_sample = coda.samples(
jags_model,
c("tau0", "tau1", "prec", "w", "vars", "r"),
n.iter = n.iter,
n.burnin = floor(n.iter / 2)
)
time2 <- Sys.time()
time <- time2 - time1
return(list(coda_sample, as.numeric(time, units="secs")))
}
result <- spsl(x, z, n.iter=100, n.adapt=0, n.chains=1)
summary(result[[1]])
cat("The computation time for MCMC is", result[[2]], "secs", "\n")
install.packages("devtools")
source('C:/Users/Administrator/OneDrive - University of South Carolina/Research/R package/DGCspsl/DGCspsl/R/spsl.R')
library(DGCspsl)
?spsl
library(DGCspsl)
?spsl
?lm
?spsl
?spsl
?lm
?rjags
?coda.samples
?n.adapts
?coda_samples
?coda.samples
library(DGCspsl)
?spsl
library(DGCspsl)
library(DGCspsl)
?cspsl
?spsl
cspsl(x,z,n.iter=100)
library(DGCspsl)
result <- spsl(x, z, n.iter=100, n.chains=1)
summary(result[[1]])
cat("The computation time for MCMC is", result[[2]], "secs", "\n")
result <- cspsl(x, z, n.iter=100, n.chains=1)
summary(result[[1]])
cat("The computation time for MCMC is", result[[2]], "secs", "\n")
?cspsl
if("mvtnorm" %in% rownames(installed.packages()) == FALSE) {install.packages("mvtnorm")}
if("matrixcalc" %in% rownames(installed.packages()) == FALSE) {install.packages("matrixcalc")}
if("Matrix" %in% rownames(installed.packages()) == FALSE) {install.packages("Matrix")}
library(mvtnorm)
library(matrixcalc)
library(Matrix)
############################
# Generate data of x and z #
############################
get_data <- function(n, nb, tau0, tau1){
if("mvtnorm" %in% rownames(installed.packages()) == FALSE) {install.packages("mvtnorm")}
if("matrixcalc" %in% rownames(installed.packages()) == FALSE) {install.packages("matrixcalc")}
if("Matrix" %in% rownames(installed.packages()) == FALSE) {install.packages("Matrix")}
library(mvtnorm)
library(matrixcalc)
library(Matrix)
fisher<-function(x) return(1/2*log((1+x)/(1-x)))
inv.fisher<-function(x) return((exp(2*x)-1)/(exp(2*x)+1))
nb <- nb # number of gene
q <- choose(nb,2) # size of combination
n <- n
# setting dynamic correlation
rho<-inv.fisher(t(t(outer(z,tau1))+tau0))
# Generating z
z<-runif(n,0,1)
# Generating x
time1<-Sys.time()
x<-matrix(rep(0,nb*n),nrow=n)
for (i in 1:n){
cor.mat <- diag(rep(0.5,nb))
cor.mat[lower.tri(cor.mat)] <- rho[i,]
cor.mat<-cor.mat+t(cor.mat)
while(is.positive.definite(cor.mat)==F){
z[i]<-runif(1)
rho[i,]<-inv.fisher(t(t(outer(z[i],tau1))+tau0))
cor.mat <- diag(rep(0.5,nb))
cor.mat[lower.tri(cor.mat)] <- rho[i,]
cor.mat<-cor.mat+t(cor.mat)
}
x[i,]<-rnorm(nb)%*%chol(cor.mat) # Cholesky decomposition
}
time2<-Sys.time()
cat("generating x needs", as.numeric(time2-time1),"seconds\n")
return(list(x, z))
}
tau0<-rep(0,q) # real value of tau0 and tau1
wh<-rep(7:10,(q%/%10))+rep(0:((q%/%10)-1),rep(4,(q%/%10)))*10
tau1<-rep(0,q)
tau1[wh]<-c(0.1,0.2,0.3,0.5)
get_data(n=100, nb=5, tau0=tau0, tau1=tau1)
x,z <- get_data(n=100, nb=5, tau0=tau0, tau1=tau1)
data <- get_data(n=100, nb=5, tau0=tau0, tau1=tau1)
data[[1]]
library(DGCspsl)
library(DGCspsl)
# set tau0<-(0,0,0,0,0,0,0,0,0,0)
# set tau1<-(0,0,0,0,0,0,0.1,0.2,0.3,0.5)
tau0<-rep(0,q)
wh<-rep(7:10,(q%/%10))+rep(0:((q%/%10)-1),rep(4,(q%/%10)))*10
tau1<-rep(0,q)
tau1[wh]<-c(0.1,0.2,0.3,0.5)
data <- get_data(n=100, nb=5, tau0=tau0, tau1=tau1)
x <- data[[1]]
z <- data[[2]]
# Implement SPSL model
result <- spsl(x, z, n.iter=100, n.chains=1)
summary(result[[1]])
cat("The computation time for MCMC is", result[[2]], "secs", "\n")
?get_data
(qnorm(1-0.01/2, 0, 1)*sqrt(p.hat*(1-p.hat))/0.01)^2
p.hat<-125/999
(qnorm(1-0.01/2, 0, 1)*sqrt(p.hat*(1-p.hat))/0.01)^2
library(DGCspsl)
ll
install_github("zhangwenda1990/DGCspsl")
library(devtools)
install_github("zhangwenda1990/DGCspsl")
?spsl
install_github("zhangwenda1990/DGCspsl/DGCspsl")
library(DGCspsl)
